{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div class=\"game\">\n  <div id=\"home\">\n    <canvas id=\"mycanvas\" width=\"350\" height=\"350\"></canvas>\n  </div>\n  <button id=\"btn\">START</button>\n</div>\n\n<style>\n  #home {\n    width: 350px;\n    height: 350px;\n    background-size: auto 350px;\n    background-repeat: no-repeat;\n    background-color: lightblue;\n    background-position: center center;\n    padding: 0;\n    margin: 0;\n  }\n\n  button {\n    background-color: green;\n    color: white;\n    border: none;\n    height: 50px;\n    font-size: 12pt;\n    float: left;\n    width: 120px;\n    margin: 10px 0 0 0;\n  }\n  \n  button:hover {\n    background-color: orange;\n  }\n\n  button:disabled {\n    background-color: grey;\n  }\n\n  p {\n    font-family: Helvetica;\n    font-weight: bold;\n    width: 250px;\n    margin: 18px 0 5px 8px;\n    float: left;\n  }\n\n  .game {\n    margin: 0 auto;\n  }\n</style>",
      "status": "",
      "output": "<div class=\"game\">\n  <div id=\"home\">\n    <canvas id=\"mycanvas\" width=\"350\" height=\"350\"></canvas>\n  </div>\n  <button id=\"btn\">START</button>\n</div>\n\n<style>\n  #home {\n    width: 350px;\n    height: 350px;\n    background-size: auto 350px;\n    background-repeat: no-repeat;\n    background-color: lightblue;\n    background-position: center center;\n    padding: 0;\n    margin: 0;\n  }\n\n  button {\n    background-color: green;\n    color: white;\n    border: none;\n    height: 50px;\n    font-size: 12pt;\n    float: left;\n    width: 120px;\n    margin: 10px 0 0 0;\n  }\n  \n  button:hover {\n    background-color: orange;\n  }\n\n  button:disabled {\n    background-color: grey;\n  }\n\n  p {\n    font-family: Helvetica;\n    font-weight: bold;\n    width: 250px;\n    margin: 18px 0 5px 8px;\n    float: left;\n  }\n\n  .game {\n    margin: 0 auto;\n  }\n</style>",
      "type": "html"
    },
    {
      "code": "var mycanvas = document.getElementById('mycanvas');\nvar ctx = mycanvas.getContext('2d');\nvar snakeSize = 10; \nvar w = 350;\nvar h = 350;\nvar score = 0;\nvar snake;\nvar snakeSize = 10;\nvar food;",
      "status": "[1]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "(function (window, document, drawModule, undefined) {\n\n  var btn = document.getElementById('btn');\n  btn.addEventListener(\"click\", function(){ drawModule.init(); });\n\n  document.onkeydown = function(event) {\n      const keyCode = event.keyCode;\n\n      switch(keyCode) {\n          case 37:\n              if (direction !== 'right') {\n                  direction = 'left';\n              }\n              console.log('left'); \n              break;\n\n          case 39:\n              if (direction !== 'left') {\n                  direction = 'right';\n                  console.log('right');\n              }\n              break;\n\n          case 38:\n              if (direction !== 'down') {\n                  direction = 'up';\n                  console.log('up');\n              }\n              break;\n\n          case 40:\n              if (direction !== 'up') {\n                  direction = 'down';\n                  console.log('down');\n              }\n              break;\n      }\n  };\n\n})(window, document, drawModule);\n\n\nvar drawModule = (function () { \n  var food = []; // Array to hold multiple food items\n  const foodCount = 3; // Number of food items to generate\n\n  var bodySnake = function(x, y) {\n      ctx.fillStyle = 'green';\n      ctx.fillRect(x * snakeSize, y * snakeSize, snakeSize, snakeSize);\n      ctx.strokeStyle = 'darkgreen';\n      ctx.strokeRect(x * snakeSize, y * snakeSize, snakeSize, snakeSize);\n  }\n\n  var pizza = function(x, y) {\n      ctx.fillStyle = 'yellow';\n      ctx.fillRect(x * snakeSize, y * snakeSize, snakeSize, snakeSize);\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x * snakeSize + 1, y * snakeSize + 1, snakeSize - 2, snakeSize - 2);\n  }\n\n  var scoreText = function() {\n      var score_text = \"Score: \" + score;\n      ctx.fillStyle = 'blue';\n      ctx.fillText(score_text, 145, h - 5);\n  }\n\n  var drawSnake = function() {\n      var length = 4;\n      snake = [];\n      for (var i = length - 1; i >= 0; i--) {\n          snake.push({x: i, y: 0});\n      }  \n  }\n  \n  var paint = function() {\n      ctx.fillStyle = 'lightgrey';\n      ctx.fillRect(0, 0, w, h);\n      ctx.strokeStyle = 'black';\n      ctx.strokeRect(0, 0, w, h);\n\n      btn.setAttribute('disabled', true);\n\n      var snakeX = snake[0].x;\n      var snakeY = snake[0].y;\n\n      if (direction === 'right') { \n          snakeX++; \n      } else if (direction === 'left') { \n          snakeX--; \n      } else if (direction === 'up') { \n          snakeY--; \n      } else if (direction === 'down') { \n          snakeY++; \n      }\n\n      if (snakeX === -1 || snakeX === w / snakeSize || snakeY === -1 || snakeY === h / snakeSize || checkCollision(snakeX, snakeY, snake)) {\n          btn.removeAttribute('disabled');\n          ctx.clearRect(0, 0, w, h);\n          clearInterval(gameloop);\n          return;          \n      }\n      \n      let ateFood = false;\n      for (let i = 0; i < food.length; i++) {\n          if (snakeX === food[i].x && snakeY === food[i].y) {\n              ateFood = true;\n              food.splice(i, 1); // Remove the eaten food item\n              score++;\n              createFood(); // Add a new food item\n              break;\n          }\n      }\n\n      let tail;\n      if (ateFood) {\n          tail = { x: snakeX, y: snakeY }; // Create a new head instead of moving the tail\n      } else {\n          tail = snake.pop(); // Move the snake normally\n          tail.x = snakeX;\n          tail.y = snakeY;\n      }\n      \n      snake.unshift(tail); // Add the tail as the new head\n\n      for (let i = 0; i < snake.length; i++) {\n          bodySnake(snake[i].x, snake[i].y);\n      }\n\n      for (let i = 0; i < food.length; i++) {\n          pizza(food[i].x, food[i].y);\n      }\n\n      scoreText();\n  }\n\n  var createFood = function() {\n      food = [];\n      \n      for (let i = 0; i < foodCount; i++) {\n          let newFood;\n          do {\n              newFood = {\n                  x: Math.floor((Math.random() * 30) + 1),\n                  y: Math.floor((Math.random() * 30) + 1)\n              };\n          } while (checkCollision(newFood.x, newFood.y, snake) || food.some(f => f.x === newFood.x && f.y === newFood.y));\n\n          food.push(newFood); // Add food item to the array\n      }\n  }\n\n  var checkCollision = function(x, y, array) {\n      for (var i = 0; i < array.length; i++) {\n          if (array[i].x === x && array[i].y === y) {\n              return true;\n          }\n      } \n      return false;\n  }\n\n  var init = function() {\n      direction = 'down';\n      drawSnake();\n      createFood();\n      gameloop = setInterval(paint, 80);\n  }\n\n  return {\n      init : init\n  };\n\n}());",
      "status": "[2]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "(function (window, document, drawModule) {\n\n  const btn = document.getElementById('btn');\n  btn.addEventListener(\"click\", () => drawModule.init());\n\n  document.onkeydown = (event) => {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case 37: \n        if (direction !== 'right') {\n          direction = 'left';\n          console.log('left');\n        }\n        break;\n\n      case 39:\n        if (direction !== 'left') {\n          direction = 'right';\n          console.log('right');\n        }\n        break;\n\n      case 38:\n        if (direction !== 'down') {\n          direction = 'up';\n          console.log('up');\n        }\n        break;\n\n      case 40:\n        if (direction !== 'up') {\n          direction = 'down';\n          console.log('down');\n        }\n        break;\n    }\n  };\n\n})(window, document, drawModule);",
      "status": "[3]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}