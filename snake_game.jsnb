{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// Snake Game Code\nconst canvas = document.createElement(\"canvas\");\ndocument.body.appendChild(canvas);\nconst ctx = canvas.getContext(\"2d\");\n\nconst tileSize = 10; // Tile size\nconst tileCountX = 80; // Adjusted for the 800px width\nconst tileCountY = 30; // Adjusted for the 300px height\ncanvas.width = 800;\ncanvas.height = 300;\n\nlet snake = [{ x: 40, y: 15 }];\nlet apple = { x: 5, y: 5 };\nlet direction = \"RIGHT\";\nlet gameInterval;\nlet gameStarted = false;\nlet score = 0;\nlet difficulty = \"medium\";\nlet gameSpeed = 30; // Increased snake speed overall\n\n// Background image link\nlet backgroundImageLink = \"https://c1.wallpaperflare.com/preview/56/434/430/background-photos-grass-green.jpg\"; // Paste your background image link here\n\n// Button and Menu Setup\nconst startMenu = document.createElement(\"div\");\nconst gameOverMenu = document.createElement(\"div\");\ndocument.body.appendChild(startMenu);\ndocument.body.appendChild(gameOverMenu);\n\n// Position the start and game over menus below the canvas\nstartMenu.style.display = \"block\";\ngameOverMenu.style.display = \"none\";\nstartMenu.style.textAlign = \"center\";\ngameOverMenu.style.textAlign = \"center\";\n\n// Center the buttons below the game window\nstartMenu.style.position = \"relative\";\nstartMenu.style.top = canvas.height/100  + \"px\";  // Positioning below the canvas\n\ngameOverMenu.style.position = \"relative\";\ngameOverMenu.style.top = canvas.height/100  + \"px\";  // Positioning below the canvas\n\n// Start menu HTML\nstartMenu.innerHTML = `\n  <h2>Snake Game</h2>\n  <button onclick=\"startGame('easy')\">Easy</button>\n  <button onclick=\"startGame('medium')\">Medium</button>\n  <button onclick=\"startGame('hard')\">Hard</button>\n`;\n\n// Game over menu HTML\ngameOverMenu.innerHTML = `\n  <h2>Game Over</h2>\n  <button onclick=\"restartGame()\">Restart</button>\n  <button onclick=\"backToStartMenu()\">Back to Start Menu</button>\n`;\n\n// Align buttons side by side and center them\nconst buttons = startMenu.querySelectorAll('button');\nbuttons.forEach(button => {\n  button.style.margin = \"10px\"; // Space out the buttons\n  button.style.display = \"inline-block\"; // Align buttons side by side\n});\n\nconst gameOverButtons = gameOverMenu.querySelectorAll('button');\ngameOverButtons.forEach(button => {\n  button.style.margin = \"10px\"; // Space out the buttons\n  button.style.display = \"inline-block\"; // Align buttons side by side\n});\n\n// Game Functions\nfunction startGame(level) {\n  difficulty = level;\n  gameSpeed = difficulty === \"easy\" ? 90 : difficulty === \"medium\" ? 70 : 50; // Adjusted for increased speed\n  startMenu.style.display = \"none\";\n  gameOverMenu.style.display = \"none\";\n  resetGame();\n  gameStarted = true;\n  gameInterval = setInterval(gameLoop, gameSpeed);\n}\n\nfunction resetGame() {\n  snake = [{ x: 40, y: 15 }];\n  apple = randomApple();\n  score = 0;\n  direction = \"RIGHT\";\n}\n\nfunction gameLoop() {\n  moveSnake();\n  checkCollisions();\n  checkAppleCollision();\n  render();\n}\n\nfunction moveSnake() {\n  const head = { ...snake[0] };\n\n  if (direction === \"UP\") head.y--;\n  if (direction === \"DOWN\") head.y++;\n  if (direction === \"LEFT\") head.x--;\n  if (direction === \"RIGHT\") head.x++;\n\n  snake.unshift(head);\n  snake.pop();\n}\n\nfunction checkCollisions() {\n  const head = snake[0];\n  if (head.x < 0 || head.x >= tileCountX || head.y < 0 || head.y >= tileCountY || isSnakeBody(head)) {\n    gameOver();\n  }\n}\n\nfunction isSnakeBody(head) {\n  for (let i = 1; i < snake.length; i++) {\n    if (head.x === snake[i].x && head.y === snake[i].y) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction checkAppleCollision() {\n  const head = snake[0];\n  if (head.x === apple.x && head.y === apple.y) {\n    snake.push({ ...snake[snake.length - 1] });\n    score++;\n    apple = randomApple();\n  }\n}\n\nfunction randomApple() {\n  const x = Math.floor(Math.random() * tileCountX);\n  const y = Math.floor(Math.random() * tileCountY);\n  return { x, y };\n}\n\nfunction render() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n  // Set background image if available\n  if (backgroundImageLink) {\n    const bgImg = new Image();\n    bgImg.src = backgroundImageLink;\n    bgImg.onload = () => {\n      ctx.drawImage(bgImg, 0, 0, canvas.width, canvas.height);\n      drawGame();\n    };\n  } else {\n    ctx.fillStyle = \"black\"; // Black background\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    drawGame();\n  }\n}\n\nfunction drawGame() {\n  ctx.fillStyle = \"darkblue\";\n  for (let i = 0; i < snake.length; i++) {\n    ctx.fillRect(snake[i].x * tileSize, snake[i].y * tileSize, tileSize, tileSize);\n  }\n\n  ctx.fillStyle = \"red\";\n  ctx.beginPath();\n  ctx.arc(apple.x * tileSize + tileSize / 2, apple.y * tileSize + tileSize / 2, tileSize / 2, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.fillStyle = \"white\";\n  ctx.font = \"12px Arial\"; // Score font size\n  ctx.fillText(`Score: ${score}`, 10, 20);\n}\n\nfunction gameOver() {\n  clearInterval(gameInterval);\n  gameStarted = false;\n  gameOverMenu.style.display = \"block\";\n}\n\nfunction restartGame() {\n  gameOverMenu.style.display = \"none\";\n  startGame(difficulty);\n}\n\nfunction backToStartMenu() {\n  gameOverMenu.style.display = \"none\";\n  startMenu.style.display = \"block\";\n}\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"ArrowUp\" && direction !== \"DOWN\") direction = \"UP\";\n  if (e.key === \"ArrowDown\" && direction !== \"UP\") direction = \"DOWN\";\n  if (e.key === \"ArrowLeft\" && direction !== \"RIGHT\") direction = \"LEFT\";\n  if (e.key === \"ArrowRight\" && direction !== \"LEFT\") direction = \"RIGHT\";\n});\n",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}