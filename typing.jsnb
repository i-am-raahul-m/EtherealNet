{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// Create and style the game container\nconst gameContainer = document.createElement('div');\ngameContainer.style.position = 'relative';\ngameContainer.style.width = '100%';\ngameContainer.style.height = '80vh';\ngameContainer.style.border = '1px solid black';\ngameContainer.style.overflow = 'hidden';\ndocument.body.appendChild(gameContainer);\n\n// Create the bottom red line\nconst bottomLine = document.createElement('div');\nbottomLine.style.position = 'absolute';\nbottomLine.style.bottom = '0';\nbottomLine.style.width = '100%';\nbottomLine.style.height = '10px';\nbottomLine.style.backgroundColor = 'red';\ngameContainer.appendChild(bottomLine);\n\n// Add score and buttons\nconst scoreDisplay = document.createElement('p');\nscoreDisplay.textContent = 'Score: 0';\ndocument.body.appendChild(scoreDisplay);\n\nconst easyButton = document.createElement('button');\neasyButton.textContent = 'Easy';\neasyButton.onclick = () => startGame('easy');\ndocument.body.appendChild(easyButton);\n\nconst mediumButton = document.createElement('button');\nmediumButton.textContent = 'Medium';\nmediumButton.onclick = () => startGame('medium');\ndocument.body.appendChild(mediumButton);\n\nconst hardButton = document.createElement('button');\nhardButton.textContent = 'Hard';\nhardButton.onclick = () => startGame('hard');\ndocument.body.appendChild(hardButton);\n\n// Word list\nconst words = [\n  \"hello\", \"world\", \"program\", \"typing\", \"game\", \"challenge\", \"example\", \"random\", \"function\", \"variable\",\n  \"object\", \"array\", \"string\", \"number\", \"boolean\", \"javascript\", \"functionality\", \"visual\", \"studio\", \"code\",\n  \"element\", \"attribute\", \"property\", \"method\", \"document\", \"browser\", \"window\", \"screen\", \"keyboard\", \"event\",\n  \"listener\", \"interval\", \"timeout\", \"loop\", \"conditional\", \"statement\", \"block\", \"comment\", \"debug\", \"compile\",\n  \"execute\", \"output\", \"input\", \"parameter\", \"argument\", \"return\", \"scope\", \"closure\", \"prototype\", \"class\",\n  \"inheritance\", \"encapsulation\", \"polymorphism\", \"abstraction\", \"error\", \"exception\", \"catch\", \"throw\", \"try\",\n  \"finally\", \"syntax\", \"operator\", \"expression\", \"evaluate\", \"logical\", \"compare\", \"arithmetic\", \"iteration\",\n  \"recursion\", \"declare\", \"define\", \"initialize\", \"assign\", \"expression\", \"statement\", \"compare\", \"increment\",\n  \"decrement\", \"add\", \"subtract\", \"multiply\", \"divide\", \"modulus\", \"concatenate\", \"parse\", \"convert\", \"toString\"\n];\n\nlet activeWords = [];\nlet score = 0;\nlet animationFrameId;\nlet currentDifficulty;\nlet spawnTimeout;\n\nconst difficultySettings = {\n  easy: { spawnInterval: 2000, maxWords: 3, gravity: 1.5 },\n  medium: { spawnInterval: 1200, maxWords: 5, gravity: 2.5 },\n  hard: { spawnInterval: 800, maxWords: 8, gravity: 3.5 }\n};\n\nfunction startGame(difficulty) {\n  cancelAnimationFrame(animationFrameId);\n  clearTimeout(spawnTimeout);\n  clearWords();\n\n  activeWords = [];\n  score = 0;\n  scoreDisplay.textContent = 'Score: ' + score;\n  currentDifficulty = difficultySettings[difficulty];\n  spawnWord();\n  animateWords();\n  window.addEventListener('keydown', handleTyping);\n}\n\nfunction spawnWord() {\n  if (activeWords.length < currentDifficulty.maxWords) {\n    const wordText = words[Math.floor(Math.random() * words.length)];\n    const wordEl = document.createElement('div');\n    wordEl.className = 'word';\n    wordEl.style.position = 'absolute';\n    wordEl.style.fontSize = '24px';\n    wordEl.style.color = 'black';\n    wordEl.style.whiteSpace = 'nowrap';\n    wordEl.textContent = wordText;\n    wordEl.dataset.word = wordText;\n    wordEl.style.left = generateNonOverlappingLeft() + '%';\n    gameContainer.appendChild(wordEl);\n    activeWords.push({ el: wordEl, text: wordText, y: 0, speed: currentDifficulty.gravity });\n  }\n  spawnTimeout = setTimeout(spawnWord, currentDifficulty.spawnInterval);\n}\n\nfunction generateNonOverlappingLeft() {\n  let leftPos;\n  let overlap;\n  do {\n    leftPos = Math.random() * 80;\n    overlap = activeWords.some(wordObj => Math.abs(parseFloat(wordObj.el.style.left) - leftPos) < 10);\n  } while (overlap);\n  return leftPos;\n}\n\nfunction animateWords() {\n  activeWords.forEach((wordObj, index) => {\n    wordObj.y += wordObj.speed;\n    wordObj.el.style.top = wordObj.y + 'px';\n\n    if (wordObj.y >= gameContainer.offsetHeight - 30) {\n      gameOver();\n    }\n  });\n  animationFrameId = requestAnimationFrame(animateWords);\n}\n\nfunction handleTyping(event) {\n  const typedChar = event.key;\n  activeWords.forEach((wordObj, index) => {\n    if (wordObj.text.startsWith(typedChar)) {\n      wordObj.text = wordObj.text.slice(1);\n      if (wordObj.text.length === 0) {\n        score++;\n        scoreDisplay.textContent = 'Score: ' + score;\n        wordObj.el.remove();\n        activeWords.splice(index, 1);\n      }\n    }\n  });\n}\n\nfunction clearWords() {\n  activeWords.forEach(wordObj => wordObj.el.remove());\n  activeWords = [];\n}\n\nfunction gameOver() {\n  cancelAnimationFrame(animationFrameId);\n  clearTimeout(spawnTimeout);\n  clearWords();\n  alert('Game Over! Your score: ' + score);\n  window.removeEventListener('keydown', handleTyping);\n}\n",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{} <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}